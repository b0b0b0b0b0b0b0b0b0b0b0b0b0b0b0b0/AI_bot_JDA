package bm.b0b0b0.util;

import net.dv8tion.jda.api.EmbedBuilder;
import net.dv8tion.jda.api.entities.Message;
import net.dv8tion.jda.api.entities.Message.Attachment;
import okhttp3.*;
import org.apache.commons.io.IOUtils;

import java.awt.Color;
import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.util.Arrays;
import java.util.List;

public class MessageService {

    private static final int MAX_EMBED_LENGTH = 4096;
    private static final List<String> allowedFileExtensions = Arrays.asList("log", "txt", "json", "properties", "yml", "png", "jpg", "jpeg");

    public void handleUserRequest(Message message, String response, String fileDescription, Message initialMessage) {
        try {
            String userMention = message.getAuthor().getAsMention();
            String userQuestion = message.getContentRaw();

            // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≤–æ–ø—Ä–æ—Å –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤, –Ω–æ –ù–ï –¥–æ–±–∞–≤–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ –≤ –≤–æ–ø—Ä–æ—Å
            String truncatedQuestion = userQuestion.length() > 50
                    ? userQuestion.substring(0, 50) + "..."
                    : userQuestion;

            // –í–∫–ª—é—á–∞–µ–º —Ç–æ–ª—å–∫–æ –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –≤ –æ—Ç–≤–µ—Ç–µ, –Ω–æ –ù–ï —Å–∞–º —Ñ–∞–π–ª
            String responseHeader = String.format("**‚ùî –í–æ–ø—Ä–æ—Å –æ—Ç %s:**\n\n%s\n\n**üí° –û—Ç–≤–µ—Ç:**\n",
                    userMention, truncatedQuestion);
            int maxResponseLength = MAX_EMBED_LENGTH - responseHeader.length();

            if (response.length() <= maxResponseLength) {
                EmbedBuilder embed = createResponseEmbed(responseHeader + response, message);
                initialMessage.editMessageEmbeds(embed.build()).queue();
            } else {
                initialMessage.delete().queue();
                String remainingResponse = response;

                while (!remainingResponse.isEmpty()) {
                    String currentResponse = remainingResponse.substring(0, Math.min(remainingResponse.length(), maxResponseLength));
                    remainingResponse = remainingResponse.substring(currentResponse.length());

                    EmbedBuilder embed = createResponseEmbed(currentResponse, message);
                    message.replyEmbeds(embed.build()).queue();
                }
            }
        } catch (Exception e) {
            sendError(message);
        }
    }


    public String processFileAttachments(List<Attachment> attachments) throws IOException {
        StringBuilder fileContentBuilder = new StringBuilder();
        for (Attachment attachment : attachments) {
            String fileExtension = getFileExtension(attachment.getFileName());
            if (allowedFileExtensions.contains(fileExtension)) {
                Response response = new OkHttpClient().newCall(new Request.Builder().url(attachment.getUrl()).build()).execute();
                assert response.body() != null;
                String fileContent = IOUtils.toString(response.body().byteStream(), StandardCharsets.UTF_8);
                fileContentBuilder.append("\n\n").append(fileContent);
            }
        }
        return !fileContentBuilder.isEmpty() ? "üìé **–í–∑—è–ª –≤–∞—à –ø–µ—Ä–≤—ã–π —Ñ–∞–π–ª –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä.**\n\n" + fileContentBuilder : "";
    }

    public Message sendInitialProcessingMessage(Message message) {
        EmbedBuilder initialEmbed = new EmbedBuilder()
                .setColor(Color.YELLOW)
                .setTitle("‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞")
                .setDescription("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ, –≤–∞—à –∑–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è.")
                .setFooter("–°–¥–µ–ª–∞–Ω–æ —Å –ª—é–±–æ–≤—å—é –∫ –ú–∞–π–Ω–∫—Ä–∞—Ñ—Ç üíï", message.getJDA().getSelfUser().getAvatarUrl());

        return message.replyEmbeds(initialEmbed.build()).complete();  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    }

    private String getFileExtension(String fileName) {
        return fileName.contains(".") ? fileName.substring(fileName.lastIndexOf(".") + 1).toLowerCase() : "";
    }

    public EmbedBuilder createResponseEmbed(String response, Message message) {
        return new EmbedBuilder()
                .setColor(Color.GREEN)
                .setTitle("üü¢ BM gpt üü¢")
                .setDescription(response)
                .setFooter("–°–¥–µ–ª–∞–Ω–æ —Å –ª—é–±–æ–≤—å—é üíï", message.getJDA().getSelfUser().getAvatarUrl());
    }

    public void sendError(Message message) {
        EmbedBuilder errorEmbed = new EmbedBuilder()
                .setColor(Color.RED)
                .setTitle("‚ùå –û—à–∏–±–∫–∞")
                .setDescription("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
                .setFooter("–°–¥–µ–ª–∞–Ω–æ —Å –ª—é–±–æ–≤—å—é üíï", message.getJDA().getSelfUser().getAvatarUrl());

        message.replyEmbeds(errorEmbed.build()).queue();
    }
}
